from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from typing import List
from ..db.database import get_db
from ..db import models
from ..schemas import (
    Employee, EmployeeCreate, EmployeeActivity, EmployeeActivityCreate,
    QueryRequest, QueryResponse, EmployeeWithActivities, BenchmarkResponse, BenchmarkResult
)
from ..llm.query_processor import QueryProcessor
import time

router = APIRouter()
query_processor = QueryProcessor()

@router.post("/query", response_model=QueryResponse)
def process_query(query_request: QueryRequest, db: Session = Depends(get_db)):
    """Process a natural language query about employee activities"""
    try:
        return query_processor.process_query(db, query_request)
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/employees/", response_model=Employee)
def create_employee(
    employee: EmployeeCreate,
    db: Session = Depends(get_db)
):
    """Create a new employee"""
    try:
        db_employee = models.Employee(**employee.model_dump())
        db.add(db_employee)
        db.commit()
        db.refresh(db_employee)
        return db_employee
    except Exception as e:
        db.rollback()
        raise HTTPException(status_code=400, detail=str(e))

@router.get("/employees/", response_model=List[Employee])
def read_employees(
    skip: int = 0,
    limit: int = 100,
    db: Session = Depends(get_db)
):
    """Get all employees"""
    try:
        employees = db.query(models.Employee).offset(skip).limit(limit).all()
        return employees
    except Exception as e:
        db.rollback()
        raise HTTPException(status_code=400, detail=str(e))

@router.get("/employees/{employee_id}", response_model=EmployeeWithActivities)
def read_employee(
    employee_id: int,
    db: Session = Depends(get_db)
):
    """Get a specific employee with their activities"""
    try:
        employee = db.query(models.Employee).filter(models.Employee.id == employee_id).first()
        if employee is None:
            raise HTTPException(status_code=404, detail="Employee not found")
        return employee
    except Exception as e:
        db.rollback()
        raise HTTPException(status_code=400, detail=str(e))

@router.post("/activities/", response_model=EmployeeActivity)
def create_activity(
    activity: EmployeeActivityCreate,
    db: Session = Depends(get_db)
):
    """Create a new activity record"""
    try:
        db_activity = models.EmployeeActivity(**activity.model_dump())
        db.add(db_activity)
        db.commit()
        db.refresh(db_activity)
        return db_activity
    except Exception as e:
        db.rollback()
        raise HTTPException(status_code=400, detail=str(e))

@router.get("/activities/", response_model=List[EmployeeActivity])
def read_activities(
    skip: int = 0,
    limit: int = 100,
    db: Session = Depends(get_db)
):
    """Get all activity records"""
    try:
        activities = db.query(models.EmployeeActivity).offset(skip).limit(limit).all()
        return activities
    except Exception as e:
        db.rollback()
        raise HTTPException(status_code=400, detail=str(e))

@router.post("/benchmark", response_model=BenchmarkResponse)
def run_benchmark(db: Session = Depends(get_db)):
    """Run benchmark tests on the query processor"""
    test_queries = [
        # Basic employee information
        "What is the email address of the employee who is the Sales Manager?",
        "Which employee in the company works in the Product Development department?",
        "What was the sales revenue of 'Wei Zhang' for the week starting on '2024-08-28'?",
        "Who are the employees working in the 'Finance' department?",
        "Retrieve the total number of meetings attended by 'Na Li' in her weekly updates.",
        
        # Hours and workload
        "Which employees worked more than 40 hours during week 1?",
        "How many employees does the company have in total?",
        "What is the average hours worked by all employees during week 2?",
        "How much total sales revenue has the Sales department generated to date?",
        "What is the total sales revenue generated by the company during week 1?",
        
        # Performance metrics
        "Who worked the most hours during the first week of September 2024?",
        "Which employee attended the most meetings during week 2?",
        "Which employees in the company were hired during a time of industry recession?",
        "Who are the employees that faced challenges with customer retention, and what solutions did they propose?",
        "Which employees work in roles that likely require data analysis or reporting skills?",
        
        # Department and comparative analysis
        "List all employees who work in the IT department within the company.",
        "Compare the hours worked by 'Wei Zhang' and 'Tao Huang' during week 1.",
        "Who are the top 3 employees by total hours worked during the last 4 weeks?",
        "Who achieved the highest sales revenue in a single week, and when?",
        "What is the total number of hours worked and average sales revenue for employees in the Business Development department?"
    ]
    
    results = []
    query_type_distribution = {}
    total_time = 0
    successful_queries = 0
    
    for query in test_queries:
        start_time = time.time()
        try:
            response = query_processor.process_query(db, QueryRequest(query=query))
            execution_time = time.time() - start_time
            total_time += execution_time
            
            if response.confidence > 0:
                successful_queries += 1
                query_type = query_processor._determine_query_type(query)
                query_type_distribution[query_type] = query_type_distribution.get(query_type, 0) + 1
            
            results.append(BenchmarkResult(
                query=query,
                response=response.response,
                execution_time=execution_time,
                success=response.confidence > 0,
                error=response.error,
                sql_query=response.sql_query
            ))
            
        except Exception as e:
            execution_time = time.time() - start_time
            results.append(BenchmarkResult(
                query=query,
                response="Error processing query",
                execution_time=execution_time,
                success=False,
                error=str(e)
            ))
    
    return BenchmarkResponse(
        total_queries=len(test_queries),
        successful_queries=successful_queries,
        average_execution_time=total_time / len(test_queries) if test_queries else 0,
        query_type_distribution=query_type_distribution,
        results=results
    ) 